#!/bin/bash
########################################
# Tested with the principals file generated from Ambari 1.6.0.
#
# This script is specifically designed for clusters using Centrify.
#
# This script is designed to work with the csv principals list generated by Ambari
#    during step #3 of "Enable Security Wizard".
#
# This script generates a new script on stdout that an Active Directory Admin must execute
#    to create the keytabs on the server and the users in Active Directory.
# This script assumes that the AD Admin will have a kerberos ticket when he logs in to
#    the unix server to execute the script. If that is not true, the output of this script
#    may need to be modified to allow the AD Admin to enter their password.
#
# A seperate script is required to distribute the keytabs after they have been created.
#    I have also released this script for use.
#
# JDK Pre-requisite
#    - Depending on the JDK version you are using, you will need to install the jce policy
#        files for the jdk version, that allow for "unlimited strength" encryption.
########################################

##GLOBALS
DIR=/etc/security/keytabs/new
REALM=EXAMPLEREALM.COM
HADOOP_OU='OU=Hadoop,OU=Accounts,OU=CHANGETHISVARIABLE'
HEADLESS_OU='OU=Headless,OU=Hadoop,OU=Accounts,OU=CHANGETHISVARIABLE'

usage() {
  echo "Usage: `basename $0`" >&2
  echo "       `basename $0` -t csv -f filename.csv" >&2
  echo "       `basename $0` -t [datanode | namenode | edgenode | ambari] FQDN" >&2
  echo "       `basename $0` -t headless" >&2
  echo "       `basename $0` -t custom -p userid FQDN" >&2
  echo "       `basename $0` -t customheadless -p customheadlessuser" >&2
  echo '' >&2
  echo "The 'csv' type uses the csv file created by Ambari when setting up security." >&2
  echo "The 'csv' type will ignore any headless user. You must use -t headless to create the headless users." >&2
  echo '' >&2
  echo "NOTE: For each of the 'node' types you can change the creation based on your cluster config by modifying" >&2
  echo "      this script. I recommend using the 'node' types instead of the csv file since it will give you" >&2
  echo "      consistent keytabs for any Name Nodes you create. This allows for services to be moved if needed." >&2
  echo "      The csv file will not give you this as an option." >&2
  echo '' >&2
  echo "      Keytabs for the 'node' types will be created in '$DIR' followed by the FQDN specified." >&2
  echo '' >&2
  echo "The 'datanode' type will create keytabs for: SPNEGO User, DataNode, and NodeManager" >&2
  echo "The 'namenode' type will create keytabs for: SPNEGO User, History Server, JournalNode, NameNode," >&2 
  echo "                                             Oozie Server, ResourceManager, ZooKeeper, Falcon, and Hive" >&2
  echo "The 'edgenode' type will create keytabs for: ZooKeeper" >&2
  echo "The 'ambari' type will create keytabs for: SPNEGO User, JournalNode, Nagios, ZooKeeper" >&2
  echo '' >&2
  echo "The 'headless' type will create keytabs for: Ambari Smoke Test User, HDFS User" >&2
  echo "NOTE: ONLY ONE OF EACH HEADLESS USER CAN EXIST ACROSS THE ENTIRE KERBEROS REALM!" >&2
  echo '' >&2
  echo "The 'custom' type will create an account that is tied to the FQDN you provide." >&2
  echo "Example:" >&2
  echo "         `basename $0` -t custom -p shawn sandbox.hortonworks.com" >&2
  echo "         The resulting user will have shawn/sandbox.hortonworks.com@$REALM as a principal." >&2
  echo "         The AD account will show as 'shawn-sandbox' in the OU '$HADOOP_OU'." >&2
  echo "         The keytab file will be created in the '$DIR/sandbox.hortonworks.com' directory." >&2
  echo '' >&2
  echo "The 'customheadless' type will create an account that is NOT tied to any server." >&2
  echo "NOTE: BE CAREFUL WITH THIS TYPE AS YOU COULD CREATE A PRINCIPAL THAT ALREADY EXISTS IN AD!" >&2
  echo "Example:" >&2
  echo "         `basename $0` -t customheadless -p shawn" >&2
  echo "         The resulting user will have shawn@$REALM as a principal." >&2
  echo "         The AD account will show as 'shawn' in the OU '$HEADLESS_OU'." >&2
  echo "         The keytab file will be created in the '$DIR/headless' directory." >&2
}


set_string_vars() {
  HOST=`echo $csv_string | awk -F',' '{print $1}'`
  DESC=`echo $csv_string | awk -F',' '{print $2}'`
  PRIN=`echo $csv_string | awk -F',' '{print $3}'`
  KEYTAB=`echo $csv_string | awk -F',' '{print $4}'`
  DIR=`echo $csv_string | awk -F',' '{print $5}'`
  USER=`echo $csv_string | awk -F',' '{print $6}'`
  GRP=`echo $csv_string | awk -F',' '{print $7}'`
  OWN=`echo $csv_string | awk -F',' '{print $8}'`
  SHORT=`echo $HOST | awk -F. '{print $1}'`
  SERVICE=`echo $PRIN | awk -F@ '{print $1}'| awk -F/ '{print $1}'`
}

make_output() {

  echo "if [ ! -d "$DIR" ]; then"
  echo "    echo ERROR: $DIR does not exist"
  echo '    exit 1'
  echo 'fi'
  echo "if [ ! -d "$DIR/$HOST" ]; then"
  echo "    mkdir -p $DIR/$HOST"
  echo 'fi'
  echo "if [ -d "$DIR/$HOST" ]; then"
  echo "if ! touch $DIR/$HOST/test_write 2>/dev/null ; then"
  echo "echo 'ERROR: Cannot create files in $DIR/$HOST . Check permissions'"
  echo 'exit 1'
  echo 'fi'
  echo "rm -f $DIR/$HOST/test_write 2>/dev/null"
  echo "if [ ! -f $DIR/$HOST/$KEYTAB ]; then"
  if [ "$HOST" != 'headless' ]; then
    echo "adkeytab -V -n -K $DIR/$HOST/$KEYTAB -U $PRIN -P $SERVICE/$HOST -c \"$HADOOP_OU\" $SERVICE-$SHORT"
  else
    echo "adkeytab -V -n -K $DIR/$HOST/$KEYTAB -U $PRIN -c \"$HEADLESS_OU\" $SERVICE"
  fi
  echo 'else'
  echo "echo 'ERROR: $DIR/$HOST/$KEYTAB already exists!'"
  echo 'exit 1'
  echo 'fi'
  echo 'else'
  echo "echo 'ERROR: $DIR/$HOST does not exist'"
  echo 'exit 1'
  echo 'fi'
  echo 'read -p "Press [Enter] key when you are satisfied with the result"'
  echo ''

}

if !  ps -ef | grep ambari-server | grep -qv grep ; then
  echo "ERROR: This should be run on the ambari server" >&2
  exit 99
fi

while getopts ":t:f:p:" opt; do
  case $opt in
    t)
      if [ "$TYPE" = '' ]; then
        if echo "$OPTARG" | egrep -q 'csv|(data|name|edge)node|headless|ambari|custom|customheadless' ; then
          TYPE=$OPTARG
        else
          echo "ERROR: Invalid -t" >&2
          usage
          exit 99
        fi
      else
        echo "ERROR: -t already set" >&2
        usage
        exit 99
      fi
      ;;
    f)
      if [ "$FILE" = '' ]; then
        if [ ! -f "$OPTARG" ] || [ "$OPTARG" = '' ]; then
          echo "ERROR: -f invalid file" >&2
          usage
          exit 99
        else
          FILE=$OPTARG
        fi
      else
        echo "ERROR: -f already set" >&2
        usage
        exit 99
      fi
      ;;
    p)
      if [ "$CUSTOMPRIN" = '' ]; then
        CUSTOMPRIN=$OPTARG
      else
        echo "ERROR: -p already set" >&2
        usage
        exit 99
      fi
      ;;
    \?)
      echo "Invalid Option -$OPTARG" >&2
      usage
      exit 99
      ;;
  esac
done
shift $(($OPTIND-1))


if [ "$TYPE" = '' ]; then
  echo "ERROR: Type missing" >&2
  usage
  exit 99
fi


if [ "$TYPE" = 'csv' ]; then
  if [ "$FILE" != '' ]; then

    HTTP_ACCOUNTS=''

    # Iterate through the list of principals
    cat $FILE | while read csv_string; do

      set_string_vars

      if [[ "$SERVICE" = 'hdfs' ]] || [[ "$SERVICE" = 'ambari-qa' ]]; then
        continue
      fi

      if [[ "$SERVICE" = 'HTTP' ]]; then
        if echo "$HTTP_ACCOUNTS" | egrep -q "$SERVICE-$SHORT" ; then
          continue
        else
          HTTP_ACCOUNTS="$HTTP_ACCOUNTS $SERVICE-$SHORT"
        fi
      fi

      #Change $DIR if $SHORT is not the ambari server
      if ! uname -n | grep -qi "$SHORT" ; then
        #Changed because a csv file will have the $DIR where the files need to end up
        #on every server. We are moving it to $DIR/new for the keytabs_install.bsh script
        DIR="$DIR/new"
      fi

      make_output

      ###REFERENCE INFORMATION FOR STANDALONE KDC
      #kadmin.local -q "addprinc -randkey $PRIN"
      #kadmin.local -q "xst -norandkey -k /tmp/keytabs/$HOST/$KEYTAB $PRIN"

      #echo "Moving keytab: /tmp/keytabs/$HOST/$KEYTAB to host: $HOST:/etc/security/keytabs"
      #scp /tmp/keytabs/$HOST/$KEYTAB $HOST:/etc/security/keytabs
            #chmod $OWN /tmp/keytabs/$HOST/$KEYTAB
            #chown $USER:$GRP /tmp/keytabs/$HOST/$KEYTAB
      #tar -cvf keytabs_$hostName.tar /tmp/keytabs/$HOST/$KEYTAB

      #echo "Set permissions for $HOST:/etc/security/keytabs/$KEYTAB to $USER:$GRP $OWN"

    done
  else
    echo "ERROR: -f is invalid." >&2
    usage
    exit 99
  fi
elif [ "$TYPE" = 'datanode' ]; then
  #Check for a . character, if one exists, assume they entered a proper FQDN
  if ! echo "$1" | egrep -q '\.'; then
    echo "ERROR: Invalid FQDN: $1" >&2
    exit 1
  fi

  csv_string="$1,NodeManager SPNEGO User,HTTP/$1@$REALM,spnego.service.keytab,$DIR,root,hadoop,440"
  set_string_vars
  make_output

  csv_string="$1,DataNode,dn/$1@$REALM,dn.service.keytab,$DIR,hdfs,hadoop,400"
  set_string_vars
  make_output

  csv_string="$1,NodeManager,nm/$1@$REALM,nm.service.keytab,$DIR,yarn,hadoop,400"
  set_string_vars
  make_output

elif [ "$TYPE" = 'namenode' ]; then

  #Check for a . character, if one exists, assume they entered a proper FQDN
  if ! echo "$1" | egrep -q '\.'; then
    echo "ERROR: Invalid FQDN: $1" >&2
    exit 1
  fi

  csv_string="$1,ResourceManager SPNEGO User,HTTP/$1@$REALM,spnego.service.keytab,$DIR,root,hadoop,440"
  set_string_vars
  make_output
  csv_string="$1,History Server,jhs/$1@$REALM,jhs.service.keytab,$DIR,mapred,hadoop,400"
  set_string_vars
  make_output
  csv_string="$1,JournalNode,jn/$1@$REALM,jn.service.keytab,$DIR,hdfs,hadoop,400"
  set_string_vars
  make_output
  csv_string="$1,NameNode,nn/$1@$REALM,nn.service.keytab,$DIR,hdfs,hadoop,400"
  set_string_vars
  make_output
  csv_string="$1,Oozie Server,oozie/$1@$REALM,oozie.service.keytab,$DIR,oozie,hadoop,400"
  set_string_vars
  make_output
  csv_string="$1,ResourceManager,rm/$1@$REALM,rm.service.keytab,$DIR,yarn,hadoop,400"
  set_string_vars
  make_output
  csv_string="$1,ZooKeeper Server,zookeeper/$1@$REALM,zk.service.keytab,$DIR,zookeeper,hadoop,400"
  set_string_vars
  make_output
  csv_string="$1,Falcon Server,falcon/$1@$REALM,falcon.service.keytab,$DIR,falcon,hadoop,400"
  set_string_vars
  make_output
  csv_string="$1,Hive Metastore and HiveServer2,hive/$1@$REALM,hive.service.keytab,$DIR,hive,hadoop,400"
  set_string_vars
  make_output

elif [ "$TYPE" = 'edgenode' ]; then
  #Check for a . character, if one exists, assume they entered a proper FQDN
  if ! echo "$1" | egrep -q '\.'; then
    echo "ERROR: Invalid FQDN: $1" >&2
    exit 1
  fi

  csv_string="$1,ZooKeeper Server,zookeeper/$1@$REALM,zk.service.keytab,$DIR,zookeeper,hadoop,400"
  set_string_vars
  make_output

elif [ "$TYPE" = 'headless' ]; then
  echo "WARNING: These accounts should only be created once per Kerberos Realm!" >&2
  echo "         You must manually move these files to ALL Hadoop systems!" >&2
  read -p "Press [Enter] key if you want to continue. ctrl+c to quit" >&2

  echo 'echo "WARNING: These accounts should only be created once per Kerberos Realm!"'
  echo 'echo "         You must manually move these files to ALL Hadoop systems!"'
  echo 'read -p "Press [Enter] key if you want to continue. ctrl+c to quit"'

  csv_string="headless,Ambari Smoke Test User,ambari-qa@$REALM,smokeuser.headless.keytab,$DIR,ambari-qa,hadoop,440"
  set_string_vars
  make_output

  csv_string="headless,HDFS User,hdfs@$REALM,hdfs.headless.keytab,$DIR,hdfs,hadoop,440"
  set_string_vars
  make_output

elif [ "$TYPE" = 'ambari' ]; then
  #Check for a . character, if one exists, assume they entered a proper FQDN
  if ! echo "$1" | egrep -q '\.'; then
    echo "ERROR: Invalid FQDN: $1" >&2
    exit 1
  fi

  csv_string="$1,HDFS SPNEGO User,HTTP/$1@$REALM,spnego.service.keytab,$DIR,root,hadoop,440"
  set_string_vars
  make_output

  csv_string="$1,JournalNode,jn/$1@$REALM,jn.service.keytab,$DIR,hdfs,hadoop,400"
  set_string_vars
  make_output

  csv_string="$1,Nagios Server,nagios/$1@$REALM,nagios.service.keytab,$DIR,nagios,hadoop,400"
  set_string_vars
  make_output

  csv_string="$1,ZooKeeper Server,zookeeper/$1@$REALM,zk.service.keytab,$DIR,zookeeper,hadoop,400"
  set_string_vars
  make_output

elif [ "$TYPE" = 'custom' ]; then
  #Check for a . character, if one exists, assume they entered a proper FQDN
  if ! echo "$1" | egrep -q '\.'; then
    echo "ERROR: Invalid FQDN: $1" >&2
    exit 1
  fi

  if [ "$CUSTOMPRIN" = '' ]; then
    echo "ERROR: Missing -p flag" >&2
    usage
    exit 1
  fi

  csv_string="$1,Custom $CUSTOMPRIN Keytab,$CUSTOMPRIN/$1@$REALM,$CUSTOMPRIN.$1.keytab,$DIR,hdfs,hadoop,440"
  set_string_vars
  make_output

elif [ "$TYPE" = 'customheadless' ]; then
  if [ "$CUSTOMPRIN" = '' ]; then
    echo "ERROR: Missing -p flag" >&2
    usage
    exit 1
  fi

  csv_string="headless,Custom $CUSTOMPRIN Keytab,$CUSTOMPRIN@$REALM,$CUSTOMPRIN.headless.keytab,$DIR,hdfs,hadoop,440"
  set_string_vars
  make_output

else
  echo "ERROR: Invalid type: '$TYPE'"
  usage
  exit 99
fi
